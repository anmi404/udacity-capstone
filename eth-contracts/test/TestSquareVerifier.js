// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
// Test verification with incorrect proof

const assert = require("chai").assert;
const truffleAssert = require('truffle-assertions');
var SquareVerifier = artifacts.require("./Verifier.sol");

contract('TestSquareVerifier', accounts => {

    // const account_one = accounts[0];
    // const account_two = accounts[1];
    // //"input":["b","result"]

    describe('match erc721 spec', function () {
        beforeEach(async function () { 
       })

        it('verifies correctly', async function () { 
            let squareVerifier = await SquareVerifier.new();
            var p = require("./proof3.json").proof;
            var i = require("./proof3.json").inputs;
        
            let myreceipt = await squareVerifier.verifyTx(p.a, p.b, p.c, i);

            //Verified("Transaction successfully verified.");
            truffleAssert.eventEmitted(myreceipt, 'Verified', (ev) => {
                console.log(ev.s);
                return true;
            });
           //assert.equal(  ,"Verification incorrect: returning false when true" ); 
        })

        it('verifies incorrect values', async function () { 
            let squareVerifier = await SquareVerifier.new();
            let p = require("./proof3.json").proof;
            let i = [5,1];
            
            let ret = await squareVerifier.verifyTx.call(p.a, p.b, p.c, i);

            assert.equal(ret, false, "Verification incorrect: returning true when false"); 
        })
    
    });
})
